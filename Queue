#include <iostream>

using namespace std;

class Queue {
private:
    int front, rear, capacity;
    int* queue;

public:
    Queue(int size) {
        front = rear = 0;
        capacity = size;
        queue = new int[capacity];
    }

    ~Queue() {
        delete[] queue;
    }

    // Add an item to the queue
    void enqueue(int item) {
        if (capacity == rear) {
            cout << "Queue is full" << endl;
            return;
        }

        queue[rear] = item;
        rear++;
    }

    // Remove an item from the queue
    int dequeue() {
        if (front == rear) {
            cout << "Queue is empty" << endl;
            return -1;
        }

        int item = queue[front];
        for (int i = 0; i < rear - 1; i++) {
            queue[i] = queue[i + 1];
        }
        rear--;
        return item;
    }

    // Display the queue
    void display() {
        if (front == rear) {
            cout << "Queue is empty" << endl;
            return;
        }

        cout << "Front index: " << front << endl;
        cout << "Items in the queue: ";
        for (int i = front; i < rear; i++) {
            cout << queue[i] << " ";
        }
        cout << endl;
        cout << "Rear index: " << rear << endl;
    }
};

int main() {
    Queue q(5);

    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.display();

    cout << "Dequeued item: " << q.dequeue() << endl;
    q.display();

    q.enqueue(4);
    q.display();

    cout << "Dequeued item: " << q.dequeue() << endl;
    q.display();

    return 0;
}
